generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Notification {
  id        String   @id @default(cuid())
  type      String   // 'EXPIRING' | 'LOW_STOCK' | 'OFFER'
  message   String
  isRead    Boolean  @default(false)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ChatMessage {
  id        String   @id @default(cuid())
  content   String
  role      String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Add this to your User model
model User {
  id                  String         @id @default(cuid())
  email               String         @unique
  password            String?
  name                String
  phoneNumber         String?        // Add this field
  address             String?        // Add this field
  familySize          Int            @default(1)
  dietaryRestrictions String[]       @default([])
  allergies           String[]       @default([])
  settings            Json?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  notifications       Notification[]
  shoppingLists      ShoppingList[]
  orders             Order[]
  aiGeneratedLists AIGeneratedList[]
  chatMessages ChatMessage[]
  scheduledOrders ScheduledOrder[]

}


model ShoppingList {
  id        String      @id @default(cuid())
  userId    String
  name      String      @default("Shopping List")
  items     ShoppingItem[]
  isActive  Boolean     @default(true)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id])

  @@index([userId])
}

model ShoppingItem {
  id            String      @id @default(cuid())
  name          String
  quantity      String
  checked       Boolean     @default(false)
  shoppingList  ShoppingList @relation(fields: [shoppingListId], references: [id], onDelete: Cascade)
  shoppingListId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([shoppingListId])
}


model Order {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  items     Json[]
  status    String   @default("PENDING") // PENDING, COMPLETED, CANCELLED
  total     Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}


model AIGeneratedList {
  id          String   @id @default(cuid())
  name        String
  items       Json     // Stores the array of items
  suggestions Json     // Stores the array of suggestions
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("ai_generated_lists")
}


// Add these models to your existing schema

model Product {
  id          String        @id @default(cuid())
  name        String
  description String?
  price       Float
  category    String
  imageUrl    String?
  barcode     String?      @unique
  sku         String?      @unique
  brand       String?
  weight      Float?
  unit        String?
  inStock     Boolean      @default(true)
  vendorProducts VendorProduct[]
  orderItems     OrderItem[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model VendorProduct {
  id          String   @id @default(cuid())
  productId   String
  vendorId    String
  price       Float
  vendorSku   String?
  inStock     Boolean  @default(true)
  product     Product  @relation(fields: [productId], references: [id])
  vendor      Vendor   @relation(fields: [vendorId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([productId, vendorId])
}

model Vendor {
  id            String          @id @default(cuid())
  name          String
  apiKey        String?
  apiSecret     String?
  active        Boolean         @default(true)
  products      VendorProduct[]
  orders        ScheduledOrder[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model ScheduledOrder {
  id          String      @id @default(cuid())
  userId      String
  vendorId    String
  frequency   String      // weekly, biweekly, monthly
  status      String      @default("active")
  items       OrderItem[]
  vendor      Vendor      @relation(fields: [vendorId], references: [id])
  user        User        @relation(fields: [userId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model OrderItem {
  id              String         @id @default(cuid())
  scheduledOrder  ScheduledOrder @relation(fields: [scheduledOrderId], references: [id])
  scheduledOrderId String
  productId       String
  product         Product        @relation(fields: [productId], references: [id])
  quantity        Int
  price           Float
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}
